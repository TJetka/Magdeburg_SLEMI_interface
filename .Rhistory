regs_summary=function(modelLM){
out=list()
temp_sum=summary(modelLM)
out[[1]]=data.frame(ModelInfo=c(nrow(modelLM$model),
colnames(sum_m3$model)[1],
round(temp_sum$r.squared,digits=2),
round(temp_sum$adj.r.squared,digits=2) ))
out[[2]]=data.frame(round(temp_sum$coefficients,digits=2))
row.names(out[[1]])<-c("Observations:","Dependent Variable:","R-Squared:","Adj.R.Sq:")
colnames(out[[2]])<-c("Estm","Std.Err","t","pval")
out
}
xx=c(17,0,23,0,10,6,5,7)
xx_lpr=c("No LPR","LPR upright and supine2",
"LPR upright position",
"LPR upright2","LPR upright and supine position",
"No LPR","LPR upright position","LPR upright and supine position")
xx_folds = c("Absence of vocal nodules",
"Absence of vocal nodules",
"Absence of vocal nodules",
"Absence of vocal nodules",
"Absence of vocal nodules",
"Presence of vocal nodules",
"Presence of vocal nodules",
"Presence of vocal nodules")
ggplot(data=data.frame(value=xx,group=xx_lpr,group2=xx_folds),
aes(x=group, y=value, fill=group2,group=group2))+
geom_bar(width = 1, stat = "identity", position = "dodge")+
scale_fill_manual("",values=c("#5B9BD5","#ED7D31"))+
theme_bw()+ scale_y_continuous("Number of patients")+
scale_x_discrete("")
ggsave(plot,file="revision_plots/plotBar_3.pdf",height=4, width=6)
plot=ggplot(data=data.frame(value=xx,group=xx_lpr,group2=xx_folds),
aes(x=group, y=value, fill=group2,group=group2))+
geom_bar(width = 1, stat = "identity", position = "dodge")+
scale_fill_manual("",values=c("#5B9BD5","#ED7D31"))+
theme_bw()+ scale_y_continuous("Number of patients")+
scale_x_discrete("")
ggsave(plot,file="revision_plots/plotBar_3.pdf",height=4, width=6)
log(pi^2+1)-cos(pi)
2*pi/(pi^2+1)
1.784^2*0.5*(4.48/1.784)
x=c(125,100,40,35,41,29,35,24,50,60)
y=c(19,20,16,16,18,12,14,12,16,17)
cor(x,y)
lm(yÂ¬x)
lm(y~x)
cor(x,y)
78.87^2
0.7887^2
remove.packages("SLEMI", lib="~/R/win-library/3.5")
library(devtools)
install_github("sysbiosig/SLEMI")
remove.packages("devtools", lib="~/R/win-library/3.5")
remove.packages("SLEMI", lib="~/R/win-library/3.5")
install.packages("devtools")
install.packages("devtools")
library(devtools)
install_github("sysbiosig/SLEMI")
install_github("sysbiosig/SLEMI")
source("~/../Dropbox/Scripts/libraries_TJ_basic.R")
x=seq(from=2,to=3,length.out = 1000)
y=4*(log(x))^3
source("~/../Dropbox/Scripts/libraries_TJ_basic.R")
trapz_simple<-function(x,y){
nx=length(x)
xmesh=x[(2:nx)]-x[(1:(nx-1))]
ymesh=0.5*(y[(2:nx)]+y[(1:(nx-1))])
sum(xmesh*ymesh)
}
x=seq(from=2,to=3,length.out = 1000)
y=4*(log(x))^3
trpaz_simple(x,y)
trapz_simple(x,y)
x=seq(from=0,to=2,length.out = 1000)
y=12-9.8*x
trapz_simple(x,y)
x=seq(from=0,to=2,length.out = 1000)
y=abs(12-9.8*x)
trapz_simple(x,y)
dnorm(2.489,mean = 3.42,sd=0.57)
pnorm(2.489,mean = 3.42,sd=0.57)
pnorm(2.489,mean = 3.41,sd=0.57)
(2*8+4*15+7*21+10*28+11*3)/75
(2+4+7+10+11)/5
?rbinom
dbinom(12,150,0.08)
pbinom(11,150,0.08)
pbinom(8,20,0.3)
pbinom(3,20,0.3)
pbinom(8,20,0.3)-pbinom(3,20,0.3)
1-pbinom(5,10,0.3)
pbinom(5,10,0.3)
37/90
34/94
x= 100
y= (1-x)/(x+100*exp(-0.5*x))
y
x= 100000000000
y= (1-x)/(x+100*exp(-0.5*x))
y
x= 100
y= (1-x)/(x+100*exp(-0.5*x))
y
x= 1000
y= (1-x)/(x+100*exp(-0.5*x))
y
x= 1000000
y= (1-x)/(x+100*exp(-0.5*x))
y
x= 1000000000000000000
y= (1-x)/(x+100*exp(-0.5*x))
y
x= 100000000000000000000
y= (1-x)/(x+100*exp(-0.5*x))
y
x=seq(from=-0.1,to=2*pi,length.out = 10000)
y=exp(-x)-cos(2*x)
plot(x,y,type='l')
sin(0.38)
sin(2.74)
cos(2.41)
cos(3.87)
cos(1.28)
2/7
x=seq(from=-10,to=10,length.out = 1000)
y1=14-x^2+3*x
y2=exp(2x)-2
plot(x,y1,type='l')
x=seq(from=-10,to=10,length.out = 1000)
y1=14-x^2+3*x
y2=exp(2*x)-2
plot(x,y1,type='l')
plot(x,y2)
x=seq(from=-10,to=10,length.out = 1000)
y1=14-x^2+3*x
y2=exp(2*x)-2
plot(x,y1,type='l')
plot(x,y1,type='l')
y1
plot(x,y1)
lines(x,y2)
x=seq(from=-5,to=5,length.out = 1000)
y1=14-x^2+3*x
y2=exp(2*x)-2
plot(x,y1,type='l')
lines(x,y2,col="red")
x=seq(from=-3,to=3,length.out = 1000)
y1=14-x^2+3*x
y2=exp(2*x)-2
plot(x,y1,type='l')
lines(x,y2,col="red")
lm(data=df,y~x)
df=data.frame(x=c(19,20,21,22,23),y=c(11,10,9,11,12))
lm(data=df,y~x)
cor(df)
25*0.3+4.3
?nchoosek
?nbinom
?binom
?rbinom
choose(157,14)
choose(57,14)
choose(37,14)
5*0.95
a=83/180*pi
b=44/180*pi
(15/sin(a))*sin(b)
0.5*15*10.49*sin(53/180*pi)
(4/3)*sin((15/180)*pi)
asin(0.345)
pi-asin(0.345)
(5*1+15*5+25*15+35*23)/44
x=seq(from=-5,to=5,length.out = 1000)
y=cos(pi/4*x)-sin(pi/4*x)
plot(x,y)
x=seq(from=-4,to=4,length.out = 1000)
y=cos(pi/4*x)-sin(pi/4*x)
plot(x,y,type='l')+lines(x,rep(0,1000))
5.2^2
5.2^2-4
sqrt(5.2^2-4)
42/84
dbinom(5,20,0.25)
acos(1/9)
58/85
5*sqrt(3)/10
0.085*3066.50
14*135
14*135*0.81
14*135*1.23
1600*0.81
1600*0.81/14
1600*1.23
6/2.3
2.3*2.5
2*2.5
2.4*2.5
0.5*2.5
1.5*2.5
library(data.table)
df=fread("../Downloads/QuickGO-annotations-1568476697950-20190914.tsv")
length(unique(df$SYMBOL))
df=fread("../Downloads/QuickGO-annotations-1568478001439-20190914.tsv")
length(unique(df$SYMBOL))
df$SYMBOL
sort(unique(df$SYMBOL))
df=fread("../Downloads/QuickGO-annotations-1568478212449-20190914.tsv")
sort(unique(df$SYMBOL))
library(devtools)
install_github("sysbiosig/SLEMI")
install_github("sysbiosig/SLEMI")
install_github("sysbiosig/SLEMI")
library(devtools)
install.packages("rticles")
install.packages(pandoc)
library(devtools)
install_github("sysbiosig/SLEMI")
library(SLEMI)
temp_data=data_example1
temp_data
View(temp_data)
t1=proc.time()
output=mi_logreg_testing(data=temp_data,
signal = "signal",
response = "response",
testing_cores = 1,boot_num=1,traintest_num=1)
proc.time()-t1
temp_data=rbind(head(data_example1,50),
tail(data_example1,50))
t1=proc.time()
output=mi_logreg_testing(data=temp_data,
signal = "signal",
response = "response",
testing_cores = 1,boot_num=1,traintest_num=1)
proc.time()-t1
(1/37)*log2(1/37)+(36/37)*log2(36/37)
-((1/37)*log2(1/37)+(36/37)*log2(36/37))
log2(37)
log2(1.4*10^7)
x=seq(from=-3,to=5,length.out = 1000)
y=(x-1)*(x+2)*(x-4)
plot(x,y,type = 'l')
x=seq(from=-3.5,to=5,length.out = 1000)
y=(x-1)*(x+3)*(x-4)
plot(x,y,type = 'l')
y=(x-1)*(x+3)*(x-5)
plot(x,y,type = 'l')
x=seq(from=-3.5,to=8,length.out = 1000)
y=(x-1)*(x+3)*(x-5)
plot(x,y,type = 'l')
x=seq(from=-6,to=6,length.out = 1000)
y=(x-1)*(x+5)*(x-5)
plot(x,y,type = 'l')
y=(x-3)*(x+5)*(x-5)
plot(x,y,type = 'l')
x=seq(from=-6,to=12,length.out = 1000)
y=(x-3)*(x+5)*(x-10)
plot(x,y,type = 'l')
y=(2*x-3)*(x+5)*(x-10)
plot(x,y,type = 'l')
x=seq(from=-3,to=3,length.out = 100)
y1=2*x^2
y2=1+x^2
plot(x,y1,type='l')
lines(x,y2,col="red")
x=seq(from=0,to=2,length.out = 100)
a=1
y=x^2
plot(x,y)
plot(x,y,type='l')
x=seq(from=0,to=2,length.out = 100)
a=1
y=x^2
plot(x,y,type='l')
a=1
#x=seq(from=0,to=2,length.out = 100)
x=seq(from=0,to=0.5,length.out = 100)
y=x^2
plot(x,y,type='l')
x=seq(from=0,to=0.5,length.out = 100)
y=x^2
plot(x,y,type='l')
x=seq(from=0,to=2,length.out = 100)
x=sample(c("Android","iOS","Windows"),size = 35232,replace=TRUE)
write.table(x,"test.txt")
write.table(x,"test.txt",sep="\t",quote = FALSE,row.names = FALSE)
x=sample(c(0,1),size = 2926,replace=TRUE,prob = c(0.9,0.1))*rexp(2926,rate = 10)
hist(x)
x=sample(c(0,1),size = 2926,replace=TRUE,prob = c(0.9,0.1))*rexp(2926,rate = 10)
x=sample(c(0,1),size = 2926,replace=TRUE,prob = c(0.9,0.1))*rexp(2926,rate = 1)
hist(x)
x=sample(c(0,1),size = 2926,replace=TRUE,prob = c(0.9,0.1))*rexp(2926,rate = 0.01)
hist(x)
write.table(x,"test.txt",sep="\t",quote = FALSE,row.names = FALSE)
x=sample(c("US","PL","UK","DE"),size = 224202,replace=TRUE,prob = c(0.6,0.05,0.2,0.15))
write.table(x,"test.txt",sep="\t",quote = FALSE,row.names = FALSE)
x=sample(c(0,1),size = 224202,replace=TRUE,prob = c(0.9,0.1))*rexp(2926,rate = 0.0001)
x=sample(c(0,1),size = 224202,replace=TRUE,prob = c(0.9,0.1))*rexp(224202,rate = 0.0001)
hist(x)
x=sample(c(0,1),size = 224202,replace=TRUE,prob = c(0.9,0.1))*rexp(224202,rate = 0.00001)
hist(x)
write.table(x,"test.txt",sep="\t",quote = FALSE,row.names = FALSE)
write.table(floor(x),"test.txt",sep="\t",quote = FALSE,row.names = FALSE)
x=sample(c(0,1),size = 224202,replace=TRUE,prob = c(0.9,0.1))*rexp(224202,rate = 0.001)
hist(x)
write.table(floor(x),"test.txt",sep="\t",quote = FALSE,row.names = FALSE)
x=sample(c(0,1),size = 224202,replace=TRUE,prob = c(0.9,0.1))*rexp(224202,rate = 0.001)
write.table(floor(x),"test.txt",sep="\t",quote = FALSE,row.names = FALSE)
x=sample(c(0,1),size = 224202,replace=TRUE,prob = c(0.9,0.1))*rexp(224202,rate = 0.001)
write.table(floor(x),"test.txt",sep="\t",quote = FALSE,row.names = FALSE)
x=sample(c(0,1),size = 224202,replace=TRUE,prob = c(0.9,0.1))*rexp(224202,rate = 0.001)
write.table(floor(x),"test.txt",sep="\t",quote = FALSE,row.names = FALSE)
x=sample(c(0,1),size = 224202,replace=TRUE,prob = c(0.9,0.1))*rexp(224202,rate = 0.001)
write.table(floor(x),"test.txt",sep="\t",quote = FALSE,row.names = FALSE)
x=seq(from=-2,to=2,length.out = 1000)
y=x^3-x
plot(x,y,type='l')
ggplot(data=data.frame(x=x,y=y),aes(x=x,y=y))+
geom_line()
library(ggplot2)
ggplot(data=data.frame(x=x,y=y),aes(x=x,y=y))+
geom_line()
ggplot(data=data.frame(x=x,y=y),aes(x=x,y=y))+
geom_line()+geom_hline(yintercept = 0,colour="red")
remove.packages("SLEMI", lib="~/R/win-library/3.6")
#### Run the below code only once ####
install.packages("SLEMI")
library(readxl)
install.packages("readxl")
library(readxl)
#### Main Analysis ####
library(SLEMI)
library(stringr)
library(data.table)
library(readxl)
#### Set up a working directory ####
# (put below a directory to a path with data folders) #
# Important: do not use "\" - use "/" instead - sorry for inconvenience #
working_directory="C:/Users/ThinkPad_TJ/Dropbox/Projects/Magdeburg_CC/"
setwd(working_directory)
#### Set up data folder ####
# (put name of folder with data) #
data_folder="data_example"
#### Analysis ####
output_folder=paste0("output/",data_folder,"/")
dir.create(output_folder,recursive = TRUE,showWarnings = FALSE)
## data loading ##
temp_df_list=list()
for (ifile in dir(data_folder)){
temp_df_list[[ifile]]=read_xlsx(paste0(data_folder,"/",ifile),sheet = 1)
}
temp_df=do.call(rbind,temp_df_list)
rm(temp_df_list)
head(temp_df)
table(temp_df$Conc)
str_match(temp_df$Conc,"[0-9]+[.]?[0-9]* ng")
table(str_match(temp_df$Conc,"[0-9]+[.]?[0-9]* ng"))
table(temp_df$Conc)
as.numeric(str_trim(
str_replace_all(str_match(temp_df$Conc,"[0-9]+[.]?[0-9]* ng"),
" ng","")))
table(as.numeric(str_trim(
str_replace_all(str_match(temp_df$Conc,"[0-9]+[.]?[0-9]* ng"),
" ng",""))))
#### Main Analysis ####
library(SLEMI)
?SLEMI
class(temp_df$Conc)
class(temp_df$pSTAT3)
library(SLEMI)
library(stringr)
library(data.table)
library(readxl)
#### PARAMETERS TO SET ####
# (put below a directory to a path with data folders) #
# Important: do not use "\" - use "/" instead - sorry for inconvenience #
working_directory="C:/Users/ThinkPad_TJ/Dropbox/Projects/Magdeburg_CC/"
# put below the name of the folder with data
data_folder="data_example"
# put below the name of the column with input/signal.
# It is assumed that the values in the column include number
# in the format [xxx].[xxx]
signal_column="signal_name" # put input name here
# put below the name of the column with output/response
# It is assumed that the values in the column include number
# in the format [xxx].[xxx]
response_column="response_name" # put output name here
# If applicable, put here the name of confounding variable
# If simple mode is needed, put here "NULL"
addVar_column=NULL # put name of additional/confounding variable here
#### Set up a working directory ####
setwd(working_directory)
#### Analysis ####
output_folder=paste0("output/",data_folder,"/")
dir.create(output_folder,recursive = TRUE,showWarnings = FALSE)
## data loading ##
temp_df_list=list()
for (ifile in dir(data_folder)){
temp_df_list[[ifile]]=read_xlsx(paste0(data_folder,"/",ifile),sheet = 1)
}
temp_df=do.call(rbind,temp_df_list)
rm(temp_df_list)
if (!(class(temp_df[[signal_column]])%in%c("numeric","integer"))){
temp_df[[signal_column]]=as.numeric(str_trim(str_match(temp_df[[signal_column]],
"[0-9]+[.]?[0-9]*")))
}
if (!(class(temp_df[[response_column]])%in%c("numeric","integer"))){
temp_df[[response_column]]=as.numeric(str_trim(str_match(temp_df[[response_column]],
"[0-9]+[.]?[0-9]*")))
}
output_cc=capacity_logreg_main(dataRaw=temp_df,
signal = signal_column,
response = response_column,
side_variables = addVar_column,
output_path=output_folder)
temp_df=do.call(rbind,temp_df_list)
temp_df_list=list()
for (ifile in dir(data_folder)){
temp_df_list[[ifile]]=read_xlsx(paste0(data_folder,"/",ifile),sheet = 1)
}
temp_df=do.call(rbind,temp_df_list)
rm(temp_df_list)
if (!(class(temp_df[[signal_column]])%in%c("numeric","integer"))){
temp_df[[signal_column]]=as.numeric(str_trim(str_match(temp_df[[signal_column]],
"[0-9]+[.]?[0-9]*")))
}
as.numeric(str_trim(str_match(temp_df[[signal_column]],
"[0-9]+[.]?[0-9]*")))
signal_column
head(temp_df)
# put below the name of the column with input/signal.
# It is assumed that the values in the column include number
# in the format [xxx].[xxx]
signal_column="Conc" # put input name here
# put below the name of the column with output/response
# It is assumed that the values in the column include number
# in the format [xxx].[xxx]
response_column="pSTAT3" # put output name here
# If applicable, put here the name of confounding variable
# If simple mode is needed, put here "NULL"
addVar_column=NULL # put name of additional/confounding variable here
if (!(class(temp_df[[signal_column]])%in%c("numeric","integer"))){
temp_df[[signal_column]]=as.numeric(str_trim(str_match(temp_df[[signal_column]],
"[0-9]+[.]?[0-9]*")))
}
if (!(class(temp_df[[response_column]])%in%c("numeric","integer"))){
temp_df[[response_column]]=as.numeric(str_trim(str_match(temp_df[[response_column]],
"[0-9]+[.]?[0-9]*")))
}
output_cc=capacity_logreg_main(dataRaw=temp_df,
signal = signal_column,
response = response_column,
side_variables = addVar_column,
output_path=output_folder)
# If applicable, put here the name of confounding variable
# If simple mode is needed, put here "NULL"
addVar_column="STAT3" # put name of additional/confounding variable here
#### Set up a working directory ####
setwd(working_directory)
#### Analysis ####
output_folder=paste0("output/",data_folder,"/")
dir.create(output_folder,recursive = TRUE,showWarnings = FALSE)
## data loading ##
temp_df_list=list()
for (ifile in dir(data_folder)){
temp_df_list[[ifile]]=read_xlsx(paste0(data_folder,"/",ifile),sheet = 1)
}
temp_df=do.call(rbind,temp_df_list)
rm(temp_df_list)
if (!(class(temp_df[[signal_column]])%in%c("numeric","integer"))){
temp_df[[signal_column]]=as.numeric(str_trim(str_match(temp_df[[signal_column]],
"[0-9]+[.]?[0-9]*")))
}
if (!(class(temp_df[[response_column]])%in%c("numeric","integer"))){
temp_df[[response_column]]=as.numeric(str_trim(str_match(temp_df[[response_column]],
"[0-9]+[.]?[0-9]*")))
}
output_cc=capacity_logreg_main(dataRaw=temp_df,
signal = signal_column,
response = response_column,
side_variables = addVar_column,
output_path=output_folder)
#### Run lines below only once ####
install.packages("SLEMI")
install.packages("readxl")
#### PARAMETERS TO SET ####
# (put below a directory to a path with data folders) #
# Important: do not use "\" - use "/" instead - sorry for inconvenience #
working_directory="C:/Users/ThinkPad_TJ/Dropbox/Projects/Magdeburg_CC/"
# put below the name of the folder with data
data_folder="data_example"
# put below the name of the column with input/signal.
# It is assumed that the values in the column include number
# in the format [xxx].[xxx]
signal_column="Conc" # put input name here
# put below the name of the column with output/response
# It is assumed that the values in the column include number
# in the format [xxx].[xxx]
response_column="pSTAT3" # put output name here
# If applicable, put here the name of confounding variable
# If simple mode is needed, put here "NULL"
addVar_column="STAT3" # put name of additional/confounding variable here
#### Main Analysis ####
library(SLEMI)
library(stringr)
library(data.table)
library(readxl)
source("aux_functions.R")
setwd(working_directory)
calculate_capacity(data_folder,
signal_column,response_column,addVar_column)
